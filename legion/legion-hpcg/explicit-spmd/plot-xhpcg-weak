#!/usr/bin/env python

###############################################################################
# Copyright (c)      2017 Los Alamos National Security, LLC.
#                         All rights reserved.
###############################################################################

import os
import sys
import matplotlib.pyplot as plt


class RunStats:
    def __init__(self, content):
        self.ave_cg_str = '--> Average Run Time for CG'
        self.ave_cg = self.get_val(content, self.ave_cg_str)
        self.nxyz = ''
        tmp_xyz = ''
        for i in ['x', 'y', 'z']:
            find_str = '--> n{}'.format(i)
            tmp_xyz += '{},'.format(int(self.get_val(content, find_str)))

        self.nxyz = '(nx={0}, ny={1}, nz={2})'.format(*(tmp_xyz.split(',')[:3]))

    def get_val(self, content, swith):
        line = [l for l in content if l.startswith(swith)]
        return float(line[0].split('=')[1].split(' ')[0])


class Experiment:
    def __init__(self, log_path):
        self.log_path = log_path
        self.log_files = self.get_log_files(log_path)
        self.hpcg_impl = None
        self.hpcg_opts = None
        self.numpe_stats = {}

    def set_hpcg_info(self, content):
        impll = [l for l in content if l.startswith('--> Implementation')]
        self.hpcg_impl = impll[0].split('=')[1]

        impll = [l for l in content if l.startswith('--> Options')]
        self.hpcg_opts = impll[0].split('=')[1]

    def get_log_files(self, log_path):
        (_, _, file_names) = os.walk(log_path).next()
        return [f for f in file_names if f.endswith('rxhpcg')]

    def get_numpe(self, content):
        numpel = [l for l in content if l.startswith('--> size')]
        return int(numpel[0].split('=')[1])

    def get_problem_size_string(self):
        return self.numpe_stats.itervalues().next().nxyz

    def crunch(self):
        for log in self.log_files:
            fpath = '{}/{}'.format(self.log_path, log)
            with open(fpath, 'r') as f:
                content = f.readlines()
                numpe = self.get_numpe(content)
                content = [x.strip('\n') for x in content]
                self.set_hpcg_info(content)
                self.numpe_stats[numpe] = RunStats(content)


class Plotter:
    def __init__(self, out_fname, experiments_to_plot):
        self.fname = out_fname
        self.experiments = experiments_to_plot
        self.markers = ['o',      '^',       's',       'D',       '8']
        self.colors = ['#6384B1', '#98A942', '#999999', '#D79C43', '#111111']
        self.numpes = set()
        self.cg_time = set()
        self.fig, self.ax = plt.subplots()
        self.num_plots = 0
        self.line_style = 'dotted'

    def plot(self):
        print('plotting to {}'.format(self.fname))

        for e in self.experiments:
            self.add_plot(e)

        plt.grid(True)
        plt.axis('tight')

        plt.title('Weak Scaling {}'.format(
            self.experiments[0].get_problem_size_string()))
        self.ax.set_ylabel('Average Solve Time (s)', fontsize=16)
        self.ax.set_xlabel('Number of Sub-Blocks', fontsize=16)

        scalf = 1.05
        plt.xlim(min(self.numpes) / scalf, (max(self.numpes) * scalf))
        plt.ylim(min(self.cg_time) / scalf, (max(self.cg_time) * scalf))

        plt.xticks([i for i in self.numpes])

        plt.legend(loc=2)

        self.fig.savefig(self.fname,
                         format='pdf',
                         bbox_inches='tight',
                         pad_inches=0.03)

    def add_plot(self, experiment):
        x = []
        y = []
        for k, v in sorted(experiment.numpe_stats.iteritems()):
            x.append(k)
            y.append(v.ave_cg)
        for i in x:
            self.numpes.add(i)
        for i in y:
            self.cg_time.add(i)
        mlen = len(self.markers)
        clen = len(self.colors)
        #
        mrker = self.markers[self.num_plots % mlen]
        clr = self.colors[self.num_plots % clen]
        lbl = experiment.hpcg_impl
        if experiment.hpcg_opts:
            lbl += ' ({})'.format(experiment.hpcg_opts)
        #
        plt.errorbar(x, y, marker=mrker, color=clr, label=lbl,
                     linestyle=self.line_style)
        #
        self.num_plots += 1


def usage():
    print('usage: plot-xhpcg-weak [DATADIR]...')


def check_args(argv):
    if len(argv) < 2:
        usage()
        exit(os.EX_USAGE)

    for arg in argv[1:]:
        if not os.path.isdir(arg):
            print("'{}' is not a directory. Cannot continue.".format(arg))
            usage()
            exit(os.EX_USAGE)


def process_experiments(data_dirs):
    experiments = []
    for data_dir in data_dirs:
        print('processing {}'.format(data_dir))
        e = Experiment(data_dir)
        e.crunch()
        experiments.append(e)
    return experiments


def get_usable_file_name(name, extension):
    fidx = 1
    cwd = os.getcwd()
    target_fname = '{}/{}.{}'.format(cwd, name, extension)
    while (os.path.isfile(target_fname)):
        target_fname = '{}/{}-{}.{}'.format(cwd, name, fidx, extension)
        fidx += 1

    return target_fname


def main(argv=None):
    if argv is None:
        argv = sys.argv

    check_args(argv)
    f_name = get_usable_file_name('xhpcg-plot-weak', 'pdf')
    plotter = Plotter(f_name, process_experiments(argv[1:]))
    plotter.plot()

    return os.EX_OK


if __name__ == "__main__":
    sys.exit(main())
