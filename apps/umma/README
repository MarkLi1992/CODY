Unstructured Mesh Micro Apps (UMMA)

This set of micro-apps seeks to expose useful memory access patterns
from unstructured mesh processing for optimization on a variety 
of architectures and language platforms.

Currently the 'stack' directory is populated with applications 
implemented on the stack, i.e. no dynamic memory allocation. There
are two basic implementations:

    - Struct of Arrays (soa)
    - Array of Structs (aos)

that are further differentiated based on architecture and platform:

    - Serial (reference implementation)
    - OpenMP (multi-core implementation)
    - CUDA   (GPGPU implementation)

NOTES:

1. These implementations require the CUDA SDK, a C compiler with
   OpenMP, and Lua 5.2.x.
2. The Makefile will require customization for your system.
3. As these are implemented on the stack, NPOINTS and NEDGES must
   match the generated graphs and must be changed in the code 
   to generate different sizes of graph.
4. There are 3 different graph types generated by the Lua code:

    - Pure random    (worst case for memory access)
    - Regular random (middle case)
    - Contiguous     (best case)

   Additionally, the 'file' type can be used to read in a graph
   from file for repeated testing.
5. To create a graph for testing, the code in graph.lua can be
   used directly.
    
